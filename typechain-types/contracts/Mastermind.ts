/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace Mastermind {
  export type GuessStruct = {
    code: BigNumberish[];
    blackPegs: BigNumberish;
    whitePegs: BigNumberish;
    correct: boolean;
  };

  export type GuessStructOutput = [
    code: bigint[],
    blackPegs: bigint,
    whitePegs: bigint,
    correct: boolean
  ] & {
    code: bigint[];
    blackPegs: bigint;
    whitePegs: bigint;
    correct: boolean;
  };
}

export interface MastermindInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "approve"
      | "balanceOf"
      | "codebreaker"
      | "codemaker"
      | "gameActive"
      | "gameStatus"
      | "getApproved"
      | "getBreakerScore"
      | "getGuesses"
      | "getMakerScore"
      | "guessCount"
      | "guesses"
      | "isApprovedForAll"
      | "makeGuess"
      | "name"
      | "ownerOf"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "scoreCodebreaker"
      | "scoreCodemaker"
      | "setApprovalForAll"
      | "setCodebreaker"
      | "setCodemaker"
      | "startGame"
      | "supportsInterface"
      | "symbol"
      | "tokenURI"
      | "transferFrom"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "ApprovalForAll"
      | "CodebreakerSet"
      | "CodemakerSet"
      | "GameEnded"
      | "GameStarted"
      | "GameStatusChanged"
      | "GuessMade"
      | "ScoreUpdated"
      | "Transfer"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "codebreaker",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "codemaker", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "gameActive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "gameStatus",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBreakerScore",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGuesses",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMakerScore",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "guessCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "guesses",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "makeGuess",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "scoreCodebreaker",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "scoreCodemaker",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setCodebreaker",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setCodemaker",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "startGame",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "codebreaker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "codemaker", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gameActive", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gameStatus", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBreakerScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getGuesses", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMakerScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "guessCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "guesses", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "makeGuess", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "scoreCodebreaker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "scoreCodemaker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCodebreaker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCodemaker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startGame", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    approved: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [owner: string, approved: string, tokenId: bigint];
  export interface OutputObject {
    owner: string;
    approved: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalForAllEvent {
  export type InputTuple = [
    owner: AddressLike,
    operator: AddressLike,
    approved: boolean
  ];
  export type OutputTuple = [
    owner: string,
    operator: string,
    approved: boolean
  ];
  export interface OutputObject {
    owner: string;
    operator: string;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CodebreakerSetEvent {
  export type InputTuple = [codebreaker: AddressLike, timestamp: BigNumberish];
  export type OutputTuple = [codebreaker: string, timestamp: bigint];
  export interface OutputObject {
    codebreaker: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CodemakerSetEvent {
  export type InputTuple = [codemaker: AddressLike, timestamp: BigNumberish];
  export type OutputTuple = [codemaker: string, timestamp: bigint];
  export interface OutputObject {
    codemaker: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GameEndedEvent {
  export type InputTuple = [winner: AddressLike, timestamp: BigNumberish];
  export type OutputTuple = [winner: string, timestamp: bigint];
  export interface OutputObject {
    winner: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GameStartedEvent {
  export type InputTuple = [codemaker: AddressLike, timestamp: BigNumberish];
  export type OutputTuple = [codemaker: string, timestamp: bigint];
  export interface OutputObject {
    codemaker: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GameStatusChangedEvent {
  export type InputTuple = [status: BigNumberish, timestamp: BigNumberish];
  export type OutputTuple = [status: bigint, timestamp: bigint];
  export interface OutputObject {
    status: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GuessMadeEvent {
  export type InputTuple = [
    codebreaker: AddressLike,
    guess: BigNumberish[],
    blackPegs: BigNumberish,
    whitePegs: BigNumberish,
    correct: boolean,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    codebreaker: string,
    guess: bigint[],
    blackPegs: bigint,
    whitePegs: bigint,
    correct: boolean,
    timestamp: bigint
  ];
  export interface OutputObject {
    codebreaker: string;
    guess: bigint[];
    blackPegs: bigint;
    whitePegs: bigint;
    correct: boolean;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ScoreUpdatedEvent {
  export type InputTuple = [
    scoreCodebreaker: BigNumberish,
    scoreCodemaker: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    scoreCodebreaker: bigint,
    scoreCodemaker: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    scoreCodebreaker: bigint;
    scoreCodemaker: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, tokenId: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Mastermind extends BaseContract {
  connect(runner?: ContractRunner | null): Mastermind;
  waitForDeployment(): Promise<this>;

  interface: MastermindInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  approve: TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  codebreaker: TypedContractMethod<[], [string], "view">;

  codemaker: TypedContractMethod<[], [string], "view">;

  gameActive: TypedContractMethod<[], [boolean], "view">;

  gameStatus: TypedContractMethod<[], [bigint], "view">;

  getApproved: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  getBreakerScore: TypedContractMethod<[], [bigint], "view">;

  getGuesses: TypedContractMethod<[], [Mastermind.GuessStructOutput[]], "view">;

  getMakerScore: TypedContractMethod<[], [bigint], "view">;

  guessCount: TypedContractMethod<[], [bigint], "view">;

  guesses: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, boolean] & {
        blackPegs: bigint;
        whitePegs: bigint;
        correct: boolean;
      }
    ],
    "view"
  >;

  isApprovedForAll: TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;

  makeGuess: TypedContractMethod<
    [_guess: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  name: TypedContractMethod<[], [string], "view">;

  ownerOf: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  "safeTransferFrom(address,address,uint256)": TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  "safeTransferFrom(address,address,uint256,bytes)": TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  scoreCodebreaker: TypedContractMethod<[], [bigint], "view">;

  scoreCodemaker: TypedContractMethod<[], [bigint], "view">;

  setApprovalForAll: TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;

  setCodebreaker: TypedContractMethod<[], [void], "nonpayable">;

  setCodemaker: TypedContractMethod<[], [void], "nonpayable">;

  startGame: TypedContractMethod<
    [_secretCode: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  tokenURI: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "codebreaker"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "codemaker"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "gameActive"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "gameStatus"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getApproved"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getBreakerScore"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getGuesses"
  ): TypedContractMethod<[], [Mastermind.GuessStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getMakerScore"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "guessCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "guesses"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, boolean] & {
        blackPegs: bigint;
        whitePegs: bigint;
        correct: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "isApprovedForAll"
  ): TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "makeGuess"
  ): TypedContractMethod<[_guess: BigNumberish[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ownerOf"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256)"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256,bytes)"
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "scoreCodebreaker"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "scoreCodemaker"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "setApprovalForAll"
  ): TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setCodebreaker"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setCodemaker"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "startGame"
  ): TypedContractMethod<[_secretCode: BigNumberish[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokenURI"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "ApprovalForAll"
  ): TypedContractEvent<
    ApprovalForAllEvent.InputTuple,
    ApprovalForAllEvent.OutputTuple,
    ApprovalForAllEvent.OutputObject
  >;
  getEvent(
    key: "CodebreakerSet"
  ): TypedContractEvent<
    CodebreakerSetEvent.InputTuple,
    CodebreakerSetEvent.OutputTuple,
    CodebreakerSetEvent.OutputObject
  >;
  getEvent(
    key: "CodemakerSet"
  ): TypedContractEvent<
    CodemakerSetEvent.InputTuple,
    CodemakerSetEvent.OutputTuple,
    CodemakerSetEvent.OutputObject
  >;
  getEvent(
    key: "GameEnded"
  ): TypedContractEvent<
    GameEndedEvent.InputTuple,
    GameEndedEvent.OutputTuple,
    GameEndedEvent.OutputObject
  >;
  getEvent(
    key: "GameStarted"
  ): TypedContractEvent<
    GameStartedEvent.InputTuple,
    GameStartedEvent.OutputTuple,
    GameStartedEvent.OutputObject
  >;
  getEvent(
    key: "GameStatusChanged"
  ): TypedContractEvent<
    GameStatusChangedEvent.InputTuple,
    GameStatusChangedEvent.OutputTuple,
    GameStatusChangedEvent.OutputObject
  >;
  getEvent(
    key: "GuessMade"
  ): TypedContractEvent<
    GuessMadeEvent.InputTuple,
    GuessMadeEvent.OutputTuple,
    GuessMadeEvent.OutputObject
  >;
  getEvent(
    key: "ScoreUpdated"
  ): TypedContractEvent<
    ScoreUpdatedEvent.InputTuple,
    ScoreUpdatedEvent.OutputTuple,
    ScoreUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "ApprovalForAll(address,address,bool)": TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;
    ApprovalForAll: TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;

    "CodebreakerSet(address,uint256)": TypedContractEvent<
      CodebreakerSetEvent.InputTuple,
      CodebreakerSetEvent.OutputTuple,
      CodebreakerSetEvent.OutputObject
    >;
    CodebreakerSet: TypedContractEvent<
      CodebreakerSetEvent.InputTuple,
      CodebreakerSetEvent.OutputTuple,
      CodebreakerSetEvent.OutputObject
    >;

    "CodemakerSet(address,uint256)": TypedContractEvent<
      CodemakerSetEvent.InputTuple,
      CodemakerSetEvent.OutputTuple,
      CodemakerSetEvent.OutputObject
    >;
    CodemakerSet: TypedContractEvent<
      CodemakerSetEvent.InputTuple,
      CodemakerSetEvent.OutputTuple,
      CodemakerSetEvent.OutputObject
    >;

    "GameEnded(address,uint256)": TypedContractEvent<
      GameEndedEvent.InputTuple,
      GameEndedEvent.OutputTuple,
      GameEndedEvent.OutputObject
    >;
    GameEnded: TypedContractEvent<
      GameEndedEvent.InputTuple,
      GameEndedEvent.OutputTuple,
      GameEndedEvent.OutputObject
    >;

    "GameStarted(address,uint256)": TypedContractEvent<
      GameStartedEvent.InputTuple,
      GameStartedEvent.OutputTuple,
      GameStartedEvent.OutputObject
    >;
    GameStarted: TypedContractEvent<
      GameStartedEvent.InputTuple,
      GameStartedEvent.OutputTuple,
      GameStartedEvent.OutputObject
    >;

    "GameStatusChanged(uint8,uint256)": TypedContractEvent<
      GameStatusChangedEvent.InputTuple,
      GameStatusChangedEvent.OutputTuple,
      GameStatusChangedEvent.OutputObject
    >;
    GameStatusChanged: TypedContractEvent<
      GameStatusChangedEvent.InputTuple,
      GameStatusChangedEvent.OutputTuple,
      GameStatusChangedEvent.OutputObject
    >;

    "GuessMade(address,uint8[],uint8,uint8,bool,uint256)": TypedContractEvent<
      GuessMadeEvent.InputTuple,
      GuessMadeEvent.OutputTuple,
      GuessMadeEvent.OutputObject
    >;
    GuessMade: TypedContractEvent<
      GuessMadeEvent.InputTuple,
      GuessMadeEvent.OutputTuple,
      GuessMadeEvent.OutputObject
    >;

    "ScoreUpdated(uint256,uint256,uint256)": TypedContractEvent<
      ScoreUpdatedEvent.InputTuple,
      ScoreUpdatedEvent.OutputTuple,
      ScoreUpdatedEvent.OutputObject
    >;
    ScoreUpdated: TypedContractEvent<
      ScoreUpdatedEvent.InputTuple,
      ScoreUpdatedEvent.OutputTuple,
      ScoreUpdatedEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
  };
}
